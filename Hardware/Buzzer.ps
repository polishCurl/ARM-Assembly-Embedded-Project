%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
90 90 4758 6846 600 pap
%%Page: cds 1
gis
0 0 4251 1349 clwin
ssls
0 0 0 slc
0 0 0 sfc
71 1298 dlt
0 -58 dlv
2 -14 dlv
4 -10 dlv
10 -2 dlv
22 0 dlv
10 2 dlv
4 10 dlv
2 14 dlv
0 58 dlv
dle
149 1228 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 8 dlv
0 14 dlv
0 8 dlv
-8 6 dlv
-36 4 dlv
-4 6 dlv
-2 8 dlv
0 10 dlv
2 8 dlv
6 6 dlv
32 0 dlv
8 -6 dlv
2 -8 dlv
dle
273 1214 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 271 1258 dls
297 1214 dlt
0 84 dlv
42 0 dlv
8 -6 dlv
0 -8 dlv
0 -20 dlv
0 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
339 1250 dlt
8 -4 dlv
0 -10 dlv
0 -22 dlv
dle
377 1262 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
377 1222 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
0 60 423 1214 dls
423 1256 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
457 1256 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
0 84 515 1214 dls
515 1256 dlt
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
-6 6 dlv
-4 10 dlv
dle
581 1262 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
621 1240 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
40 60 645 1214 dls
40 -60 647 1274 dls
763 1236 dlt
-52 0 dlv
46 62 dlv
0 -84 dlv
dle
0 84 787 1214 dls
787 1246 dlt
8 0 dlv
26 28 dlv
dle
28 -32 795 1246 dls
0 84 847 1214 dls
847 1246 dlt
8 0 dlv
26 28 dlv
dle
28 -32 855 1246 dls
909 1282 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
71 1079 dlt
0 84 dlv
40 0 dlv
10 -2 dlv
6 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
-40 0 dlv
dle
153 1079 dlt
30 84 dlv
32 -84 dlv
dle
-44 0 205 1101 dls
50 0 239 1163 dls
0 -84 265 1163 dls
361 1079 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 359 1123 dls
391 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
391 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
437 1079 dlt
0 84 dlv
46 0 dlv
dle
-44 0 481 1123 dls
0 60 507 1079 dls
507 1121 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
0 60 565 1079 dls
0 8 565 1155 dls
607 1079 dlt
0 84 dlv
36 -84 dlv
36 86 dlv
0 -86 dlv
dle
703 1127 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
743 1105 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
767 1139 dlt
20 -60 dlv
20 60 dlv
dle
787 1079 dlt
-4 -12 dlv
-6 -8 dlv
-4 0 dlv
dle
917 1147 dlt
0 10 dlv
-8 6 dlv
-34 0 dlv
-6 -6 dlv
-2 -10 dlv
0 -52 dlv
2 -10 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 10 dlv
0 16 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -12 dlv
dle
961 1147 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1033 1133 dlt
24 30 dlv
0 -84 dlv
dle
1087 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
1087 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
1115 1133 dlt
24 30 dlv
0 -84 dlv
dle
1163 1163 dlt
52 0 dlv
-38 -84 dlv
dle
1245 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
1245 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
1273 1093 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1347 1133 dlt
24 30 dlv
0 -84 dlv
dle
1415 1147 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1505 1079 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1487 1079 dls
1563 1133 dlt
24 30 dlv
0 -84 dlv
dle
1661 1147 dlt
0 10 dlv
-8 6 dlv
-34 0 dlv
-6 -6 dlv
-2 -10 dlv
0 -52 dlv
2 -10 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 10 dlv
0 16 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -12 dlv
dle
71 944 dlt
0 84 dlv
42 0 dlv
8 -4 dlv
2 -10 dlv
0 -20 dlv
-2 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
147 1028 dlt
0 -84 dlv
42 0 dlv
dle
231 944 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
22 0 dlv
12 -2 dlv
6 -10 dlv
2 -16 dlv
0 -28 dlv
-2 -16 dlv
-6 -10 dlv
-12 -2 dlv
-22 0 dlv
dle
50 0 297 1028 dls
0 -84 323 1028 dls
389 958 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 8 dlv
0 14 dlv
0 8 dlv
-8 6 dlv
-36 4 dlv
-4 6 dlv
-2 8 dlv
0 10 dlv
2 8 dlv
6 6 dlv
32 0 dlv
8 -6 dlv
2 -8 dlv
dle
0 84 465 944 dls
491 1028 dlt
50 0 dlv
-52 -84 dlv
54 0 dlv
dle
615 944 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 613 988 dls
645 992 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
645 952 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
743 966 dlt
-52 0 dlv
46 62 dlv
0 -84 dlv
dle
777 944 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
803 1012 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
915 990 dlt
10 -6 dlv
0 -8 dlv
0 -18 dlv
0 -8 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 8 dlv
0 18 dlv
2 8 dlv
8 6 dlv
30 0 dlv
8 4 dlv
2 10 dlv
0 10 dlv
-2 8 dlv
-8 6 dlv
-30 0 dlv
-6 -6 dlv
-2 -8 dlv
0 -10 dlv
2 -8 dlv
6 -6 dlv
dle
40 60 967 944 dls
40 -60 969 1004 dls
1051 998 dlt
24 30 dlv
0 -84 dlv
dle
1099 998 dlt
24 30 dlv
0 -84 dlv
dle
1157 944 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1233 966 dlt
-52 0 dlv
46 62 dlv
0 -84 dlv
dle
1257 998 dlt
24 30 dlv
0 -84 dlv
dle
0 84 1323 944 dls
0 60 1347 944 dls
1347 986 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
1451 986 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
0 84 1475 944 dls
1475 986 dlt
4 12 dlv
6 6 dlv
18 0 dlv
8 -6 dlv
4 -12 dlv
0 -42 dlv
dle
1539 976 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
1605 956 dlt
4 -10 dlv
6 -2 dlv
20 0 dlv
8 2 dlv
2 6 dlv
0 14 dlv
-2 6 dlv
-8 4 dlv
-20 0 dlv
-6 2 dlv
-4 6 dlv
0 10 dlv
4 6 dlv
6 4 dlv
20 0 dlv
8 -4 dlv
2 -8 dlv
dle
71 893 dlt
0 -84 dlv
42 0 dlv
dle
0 60 137 809 dls
0 8 137 885 dls
0 84 161 809 dls
161 851 dlt
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
-6 6 dlv
-4 10 dlv
dle
0 60 227 809 dls
227 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
285 857 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
325 835 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
0 60 349 809 dls
349 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
407 869 dlt
20 -60 dlv
20 60 dlv
dle
427 809 dlt
-4 -12 dlv
-6 -8 dlv
-4 0 dlv
dle
477 857 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
477 817 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
597 871 dlt
-2 12 dlv
-4 8 dlv
-10 2 dlv
-24 0 dlv
-10 -2 dlv
-4 -10 dlv
-2 -16 dlv
0 -28 dlv
2 -18 dlv
4 -8 dlv
10 -2 dlv
24 0 dlv
10 2 dlv
4 10 dlv
2 10 dlv
dle
639 809 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
22 0 dlv
12 -2 dlv
6 -10 dlv
2 -16 dlv
0 -28 dlv
-2 -16 dlv
-6 -10 dlv
-12 -2 dlv
-22 0 dlv
dle
705 809 dlt
0 84 dlv
36 -84 dlv
36 86 dlv
0 -86 dlv
dle
801 809 dlt
0 84 dlv
42 0 dlv
8 -4 dlv
2 -10 dlv
0 -20 dlv
-2 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
879 877 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
953 877 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1025 893 dlt
52 0 dlv
-38 -84 dlv
dle
1101 863 dlt
24 30 dlv
0 -84 dlv
dle
1151 877 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
127 736 dlt
-2 12 dlv
-4 8 dlv
-10 2 dlv
-24 0 dlv
-10 -2 dlv
-4 -10 dlv
-2 -16 dlv
0 -28 dlv
2 -18 dlv
4 -8 dlv
10 -2 dlv
24 0 dlv
10 2 dlv
4 10 dlv
2 10 dlv
dle
151 706 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 84 217 674 dls
0 84 241 674 dls
271 722 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
271 682 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
0 60 551 674 dls
551 716 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
585 716 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
643 734 dlt
20 -60 dlv
20 60 dlv
dle
663 674 dlt
-4 -12 dlv
-6 -8 dlv
-4 0 dlv
dle
749 718 dlt
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-42 0 dlv
0 84 dlv
42 0 dlv
8 -6 dlv
0 -8 dlv
0 -12 dlv
0 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
783 734 dlt
0 -42 dlv
4 -12 dlv
6 -6 dlv
18 0 dlv
8 6 dlv
4 10 dlv
dle
0 -60 823 734 dls
849 734 dlt
36 0 dlv
-38 -60 dlv
38 0 dlv
dle
911 734 dlt
36 0 dlv
-38 -60 dlv
38 0 dlv
dle
71 623 dlt
28 -84 dlv
30 84 dlv
dle
0 60 153 539 dls
0 8 153 615 dls
177 571 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
243 599 dlt
16 -60 dlv
14 60 dlv
16 -60 dlv
16 60 dlv
dle
335 587 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
335 547 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
561 551 dlt
4 -10 dlv
6 -2 dlv
20 0 dlv
8 2 dlv
2 6 dlv
0 14 dlv
-2 6 dlv
-8 4 dlv
-20 0 dlv
-6 2 dlv
-4 6 dlv
0 10 dlv
4 6 dlv
6 4 dlv
20 0 dlv
8 -4 dlv
2 -8 dlv
dle
665 581 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
0 84 689 539 dls
689 581 dlt
4 12 dlv
6 6 dlv
18 0 dlv
8 -6 dlv
4 -12 dlv
0 -42 dlv
dle
753 571 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 60 819 539 dls
819 581 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
853 581 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
911 587 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
951 565 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
38 0 975 599 dls
985 615 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
0 60 1039 539 dls
0 8 1039 615 dls
1103 581 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
71 404 dlt
0 84 dlv
42 0 dlv
8 -4 dlv
2 -10 dlv
0 -20 dlv
-2 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
0 84 147 404 dls
181 404 dlt
-6 6 dlv
-4 14 dlv
0 22 dlv
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
dle
38 0 237 464 dls
247 480 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
319 404 dlt
30 84 dlv
32 -84 dlv
dle
-44 0 371 426 dls
0 60 405 404 dls
405 446 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
463 436 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
529 452 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
569 430 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
599 452 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
599 412 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
681 488 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
723 488 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
42 0 751 440 dls
821 474 dlt
2 8 dlv
6 6 dlv
34 0 dlv
8 -6 dlv
0 -8 dlv
0 -10 dlv
0 -10 dlv
-8 -4 dlv
-24 0 dlv
dle
863 450 dlt
8 -6 dlv
0 -12 dlv
0 -12 dlv
0 -10 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 10 dlv
dle
905 404 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
981 426 dlt
-52 0 dlv
46 62 dlv
0 -84 dlv
dle
1005 474 dlt
2 8 dlv
6 6 dlv
34 0 dlv
8 -6 dlv
0 -8 dlv
0 -10 dlv
0 -10 dlv
-8 -4 dlv
-24 0 dlv
dle
1047 450 dlt
8 -6 dlv
0 -12 dlv
0 -12 dlv
0 -10 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 10 dlv
dle
1079 488 dlt
52 0 dlv
-38 -84 dlv
dle
1155 418 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
42 0 1251 440 dls
1321 458 dlt
24 30 dlv
0 -84 dlv
dle
1379 404 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1403 418 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1477 488 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
1555 488 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
1631 426 dlt
-52 0 dlv
46 62 dlv
0 -84 dlv
dle
1665 404 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1689 418 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1763 418 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1855 458 dlt
24 30 dlv
0 -84 dlv
dle
1913 404 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1937 418 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
2011 488 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
2053 488 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
1349 4251 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
90 90 4758 6846 600 pap
nxp
%%Page: cds 1
rotp
4 0 6838 2570 clwin
0 0 6842 2570 clwin
0 0 6842 2570 clwin
ssls
0 800 400 slc
0 800 400 sfc
1927 1129 dpb
1927 1226 dpv
1986 1226 dpv
2034 1177 dpv
1986 1129 dpv
dpu
1000 1000 1000 slc
1000 1000 1000 sfc
10 0 165 1044 dls
0 -54 170 1044 dls
10 0 165 990 dls
196 1033 dlt
5 3 dlv
8 8 dlv
0 -54 dlv
dle
16 0 2947 1060 dls
0 -86 2955 1060 dls
16 0 2947 974 dls
2988 1039 dlt
0 4 dlv
4 8 dlv
4 5 dlv
8 4 dlv
17 0 dlv
8 -4 dlv
4 -5 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-41 -41 dlv
57 0 dlv
dle
10 0 6162 1365 dls
0 -54 6167 1365 dls
10 0 6162 1311 dls
6200 1365 dlt
-8 -3 dlv
-5 -7 dlv
-2 -13 dlv
0 -8 dlv
2 -13 dlv
5 -7 dlv
8 -3 dlv
5 0 dlv
8 3 dlv
5 7 dlv
3 13 dlv
0 8 dlv
-3 13 dlv
-5 7 dlv
-8 3 dlv
-5 0 dlv
dle
-36 -54 6221 1365 dls
1000 1000 1000 slc
1000 1000 1000 sfc
3108 2570 dlt
27 -70 dlv
26 70 dlv
dle
3224 2553 dlt
-3 7 dlv
-7 6 dlv
-6 4 dlv
-14 0 dlv
-6 -4 dlv
-7 -6 dlv
-3 -7 dlv
-3 -10 dlv
0 -17 dlv
3 -10 dlv
3 -6 dlv
7 -7 dlv
6 -3 dlv
14 0 dlv
6 3 dlv
7 7 dlv
3 6 dlv
dle
3294 2553 dlt
-3 7 dlv
-7 6 dlv
-7 4 dlv
-13 0 dlv
-7 -4 dlv
-6 -6 dlv
-4 -7 dlv
-3 -10 dlv
0 -17 dlv
3 -10 dlv
4 -6 dlv
6 -7 dlv
7 -3 dlv
13 0 dlv
7 3 dlv
7 7 dlv
3 6 dlv
dle
4717 197 dlt
-3 7 dlv
-7 6 dlv
-6 4 dlv
-14 0 dlv
-6 -4 dlv
-7 -6 dlv
-3 -7 dlv
-3 -10 dlv
0 -16 dlv
3 -10 dlv
3 -7 dlv
7 -7 dlv
6 -3 dlv
14 0 dlv
6 3 dlv
7 7 dlv
3 7 dlv
0 10 dlv
-16 0 dlv
dle
4740 144 dlt
0 70 dlv
47 -70 dlv
0 70 dlv
dle
4813 144 dlt
0 70 dlv
24 0 dlv
10 -4 dlv
6 -6 dlv
3 -7 dlv
4 -10 dlv
0 -16 dlv
-4 -10 dlv
-3 -7 dlv
-6 -7 dlv
-10 -3 dlv
-24 0 dlv
dle
1000 1000 1000 slc
0 800 400 sfc
1927 1177 0 0 dbu
-215 0 1392 321 dls
-215 0 1392 1177 dls
-215 0 1392 1713 dls
-215 0 1392 749 dls
-215 0 1392 963 dls
-215 0 1392 535 dls
-215 0 1392 1392 dls
0 107 3212 2302 dls
0 107 3212 2409 dls
-214 0 3319 2516 dls
214 0 2034 749 dls
214 0 2034 1606 dls
1499 1499 2248 428 dbu
-215 0 3962 1177 dls
0 321 4765 267 dls
-27 0 4781 267 dls
-81 0 4808 321 dls
-161 0 4845 374 dls
215 0 4925 1124 dls
215 0 4925 1231 dls
5407 1338 dlt
268 643 dlv
0 -1553 dlv
-268 589 dlv
-267 0 dlv
0 321 dlv
267 0 dlv
dle
1000 1000 1000 slc
1000 1000 1000 sfc
423 817 dlt
-3 5 dlv
-5 5 dlv
-5 2 dlv
-10 0 dlv
-5 -2 dlv
-5 -5 dlv
-3 -5 dlv
-2 -8 dlv
0 -13 dlv
2 -7 dlv
3 -5 dlv
5 -6 dlv
5 -2 dlv
10 0 dlv
5 2 dlv
5 6 dlv
3 5 dlv
dle
0 -53 441 829 dls
471 812 dlt
-5 -3 dlv
-5 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -7 dlv
5 -6 dlv
5 -2 dlv
8 0 dlv
5 2 dlv
5 6 dlv
3 7 dlv
0 5 dlv
-3 8 dlv
-5 5 dlv
-5 3 dlv
-8 0 dlv
dle
538 804 dlt
-6 5 dlv
-5 3 dlv
-7 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -7 dlv
5 -6 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
6 6 dlv
dle
0 -53 555 829 dls
-26 -26 581 812 dls
17 -20 566 796 dls
624 804 dlt
-2 5 dlv
-8 3 dlv
-8 0 dlv
-7 -3 dlv
-3 -5 dlv
3 -5 dlv
5 -3 dlv
13 -2 dlv
5 -3 dlv
2 -5 dlv
0 -2 dlv
-2 -6 dlv
-8 -2 dlv
-8 0 dlv
-7 2 dlv
-3 6 dlv
dle
2847 1256 dlt
0 54 dlv
18 0 dlv
8 -3 dlv
5 -5 dlv
3 -5 dlv
2 -7 dlv
0 -13 dlv
-2 -8 dlv
-3 -5 dlv
-5 -5 dlv
-8 -3 dlv
-18 0 dlv
dle
2898 1310 dlt
3 -3 dlv
2 3 dlv
-2 3 dlv
-3 -3 dlv
dle
0 -36 2901 1292 dls
2916 1292 dlt
16 -36 dlv
15 36 dlv
dle
2960 1310 dlt
2 -3 dlv
3 3 dlv
-3 3 dlv
-2 -3 dlv
dle
0 -36 2962 1292 dls
0 -54 3011 1310 dls
3011 1285 dlt
-6 5 dlv
-5 2 dlv
-7 0 dlv
-5 -2 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
7 0 dlv
5 3 dlv
6 5 dlv
dle
3028 1277 dlt
31 0 dlv
0 5 dlv
-3 5 dlv
-2 3 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -36 3077 1292 dls
3077 1277 dlt
2 8 dlv
6 5 dlv
5 2 dlv
7 0 dlv
dle
6298 1125 dlt
23 0 dlv
8 -2 dlv
2 -3 dlv
3 -5 dlv
0 -8 dlv
-3 -5 dlv
-2 -2 dlv
-8 -3 dlv
-23 0 dlv
0 54 dlv
23 0 dlv
8 -3 dlv
2 -2 dlv
3 -6 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-8 -3 dlv
dle
6352 1133 dlt
0 -26 dlv
2 -7 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
8 7 dlv
dle
0 -36 6380 1133 dls
6398 1133 dlt
28 0 dlv
-28 -36 dlv
28 0 dlv
dle
6441 1133 dlt
28 0 dlv
-28 -36 dlv
28 0 dlv
dle
6484 1118 dlt
31 0 dlv
0 5 dlv
-3 5 dlv
-2 2 dlv
-5 3 dlv
-8 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -7 dlv
0 -6 dlv
3 -7 dlv
5 -5 dlv
5 -3 dlv
8 0 dlv
5 3 dlv
5 5 dlv
dle
0 -36 6533 1133 dls
6533 1118 dlt
2 7 dlv
5 5 dlv
5 3 dlv
8 0 dlv
dle
0 800 400 slc
0 800 400 sfc
2034 1167 dpb
2248 1167 dpv
2254 1172 dpv
2254 1183 dpv
2248 1188 dpv
2034 1188 dpv
2029 1183 dpv
2029 1172 dpv
dps
214 0 2034 1177 dls
1000 1000 1000 slc
1000 1000 1000 sfc
214 0 1392 1713 dls
0 964 1606 749 dls
428 0 1606 749 dls
0 535 2034 1606 dls
1178 0 2034 2141 dls
0 161 3212 2141 dls
642 0 3962 1177 dls
0 54 4604 1177 dls
0 536 4765 588 dls
321 0 4604 1231 dls
160 0 4765 1124 dls
1000 1000 1000 slc
1000 1000 1000 sfc
1392 1179 dlt
-5 5 dlv
-5 2 dlv
-7 0 dlv
-6 -2 dlv
-5 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
5 -5 dlv
6 -2 dlv
7 0 dlv
5 2 dlv
5 5 dlv
dle
1420 1186 dlt
-5 -2 dlv
-5 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
5 -5 dlv
5 -2 dlv
8 0 dlv
5 2 dlv
5 5 dlv
3 8 dlv
0 5 dlv
-3 8 dlv
-5 5 dlv
-5 2 dlv
-8 0 dlv
dle
1459 1186 dlt
0 -25 dlv
2 -8 dlv
5 -2 dlv
8 0 dlv
5 2 dlv
8 8 dlv
dle
0 -35 1487 1186 dls
0 -35 1507 1186 dls
1507 1176 dlt
8 8 dlv
5 2 dlv
7 0 dlv
6 -2 dlv
2 -8 dlv
0 -25 dlv
dle
1558 1204 dlt
0 -43 dlv
3 -8 dlv
5 -2 dlv
5 0 dlv
dle
18 0 1550 1186 dls
1627 1197 dlt
-41 -23 dlv
41 -23 dlv
dle
1652 1194 dlt
6 3 dlv
7 7 dlv
0 -53 dlv
dle
1719 1204 dlt
-26 0 dlv
-2 -23 dlv
2 3 dlv
8 2 dlv
7 0 dlv
8 -2 dlv
5 -5 dlv
3 -8 dlv
0 -5 dlv
-3 -8 dlv
-5 -5 dlv
-8 -2 dlv
-7 0 dlv
-8 2 dlv
-2 3 dlv
-3 5 dlv
dle
1744 1186 dlt
-2 -2 dlv
2 -3 dlv
3 3 dlv
-3 2 dlv
dle
1744 1156 dlt
-2 -3 dlv
2 -2 dlv
3 2 dlv
-3 3 dlv
dle
1780 1204 dlt
-8 -2 dlv
-5 -8 dlv
-2 -13 dlv
0 -7 dlv
2 -13 dlv
5 -8 dlv
8 -2 dlv
5 0 dlv
8 2 dlv
5 8 dlv
2 13 dlv
0 7 dlv
-2 13 dlv
-5 8 dlv
-8 2 dlv
-5 0 dlv
dle
-35 -53 1800 1204 dls
1818 1197 dlt
41 -23 dlv
-41 -23 dlv
dle
738 1179 dlt
23 0 dlv
7 -3 dlv
3 -2 dlv
3 -6 dlv
0 -7 dlv
-3 -5 dlv
-3 -3 dlv
-7 -2 dlv
-23 0 dlv
0 53 dlv
23 0 dlv
7 -2 dlv
3 -3 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-3 -3 dlv
-7 -2 dlv
dle
784 1151 dlt
20 53 dlv
21 -53 dlv
dle
26 0 791 1168 dls
840 1204 dlt
0 -38 dlv
2 -8 dlv
5 -5 dlv
8 -2 dlv
5 0 dlv
8 2 dlv
5 5 dlv
3 8 dlv
0 38 dlv
dle
896 1151 dlt
0 53 dlv
18 0 dlv
7 -2 dlv
6 -5 dlv
2 -6 dlv
3 -7 dlv
0 -13 dlv
-3 -8 dlv
-2 -5 dlv
-6 -5 dlv
-7 -2 dlv
-18 0 dlv
dle
41 0 942 1146 dls
1036 1191 dlt
-2 6 dlv
-5 5 dlv
-6 2 dlv
-10 0 dlv
-5 -2 dlv
-5 -5 dlv
-3 -6 dlv
-2 -7 dlv
0 -13 dlv
2 -8 dlv
3 -5 dlv
5 -5 dlv
5 -2 dlv
10 0 dlv
6 2 dlv
5 5 dlv
2 5 dlv
dle
1054 1204 dlt
0 -53 dlv
31 0 dlv
dle
0 -53 1097 1204 dls
-36 -36 1133 1204 dls
23 -30 1110 1181 dls
743 1729 dlt
5 3 dlv
8 8 dlv
0 -54 dlv
dle
781 1686 dlt
0 54 dlv
21 -54 dlv
20 54 dlv
0 -54 dlv
dle
0 -54 842 1740 dls
0 -54 878 1740 dls
36 0 842 1714 dls
896 1740 dlt
36 0 dlv
-36 -54 dlv
36 0 dlv
dle
41 0 942 1681 dls
1036 1727 dlt
-2 5 dlv
-5 5 dlv
-6 3 dlv
-10 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -5 dlv
-2 -8 dlv
0 -13 dlv
2 -7 dlv
3 -5 dlv
5 -5 dlv
5 -3 dlv
10 0 dlv
6 3 dlv
5 5 dlv
2 5 dlv
dle
1054 1740 dlt
0 -54 dlv
31 0 dlv
dle
0 -54 1097 1740 dls
-36 -36 1133 1740 dls
23 -31 1110 1717 dls
875 1406 dlt
-2 5 dlv
-5 5 dlv
-5 2 dlv
-11 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -5 dlv
-3 -8 dlv
0 -13 dlv
3 -7 dlv
2 -6 dlv
5 -5 dlv
5 -2 dlv
11 0 dlv
5 2 dlv
5 5 dlv
2 6 dlv
dle
893 1418 dlt
0 -53 dlv
31 0 dlv
dle
0 -53 936 1418 dls
-36 -35 972 1418 dls
23 -30 949 1395 dls
41 0 982 1360 dls
1067 1393 dlt
-3 5 dlv
-8 3 dlv
-7 0 dlv
-8 -3 dlv
-3 -5 dlv
3 -5 dlv
5 -3 dlv
13 -2 dlv
5 -3 dlv
3 -5 dlv
0 -3 dlv
-3 -5 dlv
-8 -2 dlv
-7 0 dlv
-8 2 dlv
-3 5 dlv
dle
1082 1385 dlt
30 0 dlv
0 5 dlv
-2 5 dlv
-3 3 dlv
-5 3 dlv
-7 0 dlv
-6 -3 dlv
-5 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
5 -5 dlv
6 -2 dlv
7 0 dlv
5 2 dlv
5 5 dlv
dle
0 -53 1130 1418 dls
0 -54 941 776 dls
36 0 923 776 dls
11 0 966 776 dls
0 -54 971 776 dls
11 0 966 722 dls
1005 776 dlt
-6 -3 dlv
-5 -5 dlv
-2 -5 dlv
-3 -8 dlv
0 -12 dlv
3 -8 dlv
2 -5 dlv
5 -5 dlv
6 -3 dlv
10 0 dlv
5 3 dlv
5 5 dlv
3 5 dlv
2 8 dlv
0 12 dlv
-2 8 dlv
-3 5 dlv
-5 5 dlv
-5 3 dlv
-10 0 dlv
dle
1048 750 dlt
23 0 dlv
7 -2 dlv
3 -3 dlv
3 -5 dlv
0 -7 dlv
-3 -6 dlv
-3 -2 dlv
-7 -3 dlv
-23 0 dlv
0 54 dlv
23 0 dlv
7 -3 dlv
3 -2 dlv
3 -5 dlv
0 -5 dlv
-3 -6 dlv
-3 -2 dlv
-7 -3 dlv
dle
1114 776 dlt
-7 -3 dlv
-6 -7 dlv
-2 -13 dlv
0 -8 dlv
2 -12 dlv
6 -8 dlv
7 -3 dlv
5 0 dlv
8 3 dlv
5 8 dlv
3 12 dlv
0 8 dlv
-3 13 dlv
-5 7 dlv
-8 3 dlv
-5 0 dlv
dle
-36 -54 1135 776 dls
0 -54 946 348 dls
36 0 928 348 dls
10 0 972 348 dls
0 -54 977 348 dls
10 0 972 294 dls
1010 348 dlt
-5 -3 dlv
-5 -5 dlv
-3 -5 dlv
-2 -8 dlv
0 -13 dlv
2 -7 dlv
3 -5 dlv
5 -5 dlv
5 -3 dlv
10 0 dlv
5 3 dlv
5 5 dlv
3 5 dlv
2 7 dlv
0 13 dlv
-2 8 dlv
-3 5 dlv
-5 5 dlv
-5 3 dlv
-10 0 dlv
dle
1053 322 dlt
23 0 dlv
8 -3 dlv
2 -2 dlv
3 -5 dlv
0 -8 dlv
-3 -5 dlv
-2 -2 dlv
-8 -3 dlv
-23 0 dlv
0 54 dlv
23 0 dlv
8 -3 dlv
2 -3 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-8 -3 dlv
dle
1112 337 dlt
5 3 dlv
8 8 dlv
0 -54 dlv
dle
0 -54 952 990 dls
35 0 934 990 dls
10 0 977 990 dls
0 -54 982 990 dls
10 0 977 936 dls
1015 990 dlt
-5 -3 dlv
-5 -5 dlv
-2 -5 dlv
-3 -7 dlv
0 -13 dlv
3 -8 dlv
2 -5 dlv
5 -5 dlv
5 -3 dlv
10 0 dlv
6 3 dlv
5 5 dlv
2 5 dlv
3 8 dlv
0 13 dlv
-3 7 dlv
-2 5 dlv
-5 5 dlv
-6 3 dlv
-10 0 dlv
dle
1051 936 dlt
20 54 dlv
21 -54 dlv
dle
25 0 1059 954 dls
1112 980 dlt
5 2 dlv
8 8 dlv
0 -54 dlv
dle
947 508 dlt
0 54 dlv
23 0 dlv
7 -3 dlv
3 -2 dlv
2 -6 dlv
0 -7 dlv
-2 -5 dlv
-3 -3 dlv
-7 -2 dlv
-23 0 dlv
dle
1036 549 dlt
-3 5 dlv
-5 5 dlv
-5 3 dlv
-10 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -5 dlv
-2 -8 dlv
0 -12 dlv
2 -8 dlv
3 -5 dlv
5 -5 dlv
5 -3 dlv
10 0 dlv
5 3 dlv
5 5 dlv
3 5 dlv
dle
0 -54 1054 562 dls
-35 -36 1089 562 dls
22 -31 1067 539 dls
1112 551 dlt
6 3 dlv
7 8 dlv
0 -54 dlv
dle
3288 2254 dlt
0 32 dlv
13 0 dlv
5 -2 dlv
2 -1 dlv
1 -3 dlv
0 -5 dlv
-1 -3 dlv
-2 -2 dlv
-5 -1 dlv
-13 0 dlv
dle
2319 1616 dlt
-5 5 dlv
-6 3 dlv
-7 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -7 dlv
5 -6 dlv
5 -2 dlv
7 0 dlv
6 2 dlv
5 6 dlv
dle
2334 1608 dlt
31 0 dlv
0 5 dlv
-3 5 dlv
-3 3 dlv
-5 3 dlv
-7 0 dlv
-5 -3 dlv
-6 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -7 dlv
6 -6 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
6 6 dlv
dle
2319 750 dlt
-5 5 dlv
-6 3 dlv
-7 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -7 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -3 dlv
7 0 dlv
6 3 dlv
5 5 dlv
dle
0 -54 2336 776 dls
0 -54 2357 776 dls
-25 -25 2382 758 dls
18 -21 2367 743 dls
2319 1179 dlt
-5 5 dlv
-6 2 dlv
-7 0 dlv
-5 -2 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -2 dlv
7 0 dlv
6 2 dlv
5 5 dlv
dle
2347 1186 dlt
-5 -2 dlv
-6 -5 dlv
-2 -8 dlv
0 -5 dlv
2 -8 dlv
6 -5 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
6 5 dlv
2 8 dlv
0 5 dlv
-2 8 dlv
-6 5 dlv
-5 2 dlv
-7 0 dlv
dle
2385 1186 dlt
0 -25 dlv
2 -8 dlv
6 -2 dlv
7 0 dlv
5 2 dlv
8 8 dlv
dle
0 -35 2413 1186 dls
0 -35 2433 1186 dls
2433 1176 dlt
8 8 dlv
5 2 dlv
8 0 dlv
5 -2 dlv
2 -8 dlv
0 -25 dlv
dle
2484 1204 dlt
0 -43 dlv
3 -8 dlv
5 -2 dlv
5 0 dlv
dle
18 0 2477 1186 dls
2553 1197 dlt
-41 -23 dlv
41 -23 dlv
dle
2579 1194 dlt
5 3 dlv
7 7 dlv
0 -53 dlv
dle
2645 1204 dlt
-26 0 dlv
-2 -23 dlv
2 3 dlv
8 2 dlv
8 0 dlv
7 -2 dlv
6 -5 dlv
2 -8 dlv
0 -5 dlv
-2 -8 dlv
-6 -5 dlv
-7 -2 dlv
-8 0 dlv
-8 2 dlv
-2 3 dlv
-3 5 dlv
dle
2670 1186 dlt
-2 -2 dlv
2 -3 dlv
3 3 dlv
-3 2 dlv
dle
2670 1156 dlt
-2 -3 dlv
2 -2 dlv
3 2 dlv
-3 3 dlv
dle
2706 1204 dlt
-7 -2 dlv
-6 -8 dlv
-2 -13 dlv
0 -7 dlv
2 -13 dlv
6 -8 dlv
7 -2 dlv
5 0 dlv
8 2 dlv
5 8 dlv
3 13 dlv
0 7 dlv
-3 13 dlv
-5 8 dlv
-8 2 dlv
-5 0 dlv
dle
-36 -53 2727 1204 dls
2744 1197 dlt
41 -23 dlv
-41 -23 dlv
dle
3602 1186 dlt
-5 -2 dlv
-5 -5 dlv
-3 -8 dlv
0 -5 dlv
3 -8 dlv
5 -5 dlv
5 -2 dlv
7 0 dlv
6 2 dlv
5 5 dlv
2 8 dlv
0 5 dlv
-2 8 dlv
-5 5 dlv
-6 2 dlv
-7 0 dlv
dle
3640 1186 dlt
0 -25 dlv
3 -8 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
8 8 dlv
dle
0 -35 3668 1186 dls
3691 1204 dlt
0 -43 dlv
3 -8 dlv
5 -2 dlv
5 0 dlv
dle
18 0 3683 1186 dls
4862 565 dlt
-2 3 dlv
-3 3 dlv
-3 1 dlv
-6 0 dlv
-3 -1 dlv
-3 -3 dlv
-2 -3 dlv
-1 -5 dlv
0 -7 dlv
1 -5 dlv
2 -3 dlv
3 -3 dlv
3 -2 dlv
6 0 dlv
3 2 dlv
3 3 dlv
2 3 dlv
0 5 dlv
-8 0 dlv
dle
5182 1125 dlt
23 0 dlv
7 -2 dlv
3 -3 dlv
3 -5 dlv
0 -8 dlv
-3 -5 dlv
-3 -2 dlv
-7 -3 dlv
-23 0 dlv
0 54 dlv
23 0 dlv
7 -3 dlv
3 -2 dlv
3 -6 dlv
0 -5 dlv
-3 -5 dlv
-3 -2 dlv
-7 -3 dlv
dle
5235 1151 dlt
0 -39 dlv
3 -7 dlv
5 -5 dlv
8 -3 dlv
5 0 dlv
7 3 dlv
6 5 dlv
2 7 dlv
0 39 dlv
dle
5289 1151 dlt
36 0 dlv
-36 -54 dlv
36 0 dlv
dle
5340 1151 dlt
36 0 dlv
-36 -54 dlv
36 0 dlv
dle
5427 1151 dlt
-34 0 dlv
0 -54 dlv
34 0 dlv
dle
21 0 5393 1125 dls
5442 1097 dlt
0 54 dlv
23 0 dlv
7 -3 dlv
3 -2 dlv
3 -6 dlv
0 -5 dlv
-3 -5 dlv
-3 -2 dlv
-7 -3 dlv
-23 0 dlv
dle
18 -28 5460 1125 dls
5501 1140 dlt
5 3 dlv
7 8 dlv
0 -54 dlv
dle
5182 1232 dlt
23 0 dlv
7 -2 dlv
3 -3 dlv
3 -5 dlv
0 -8 dlv
-3 -5 dlv
-3 -2 dlv
-7 -3 dlv
-23 0 dlv
0 54 dlv
23 0 dlv
7 -3 dlv
3 -2 dlv
3 -5 dlv
0 -6 dlv
-3 -5 dlv
-3 -2 dlv
-7 -3 dlv
dle
5235 1258 dlt
0 -39 dlv
3 -7 dlv
5 -5 dlv
8 -3 dlv
5 0 dlv
7 3 dlv
6 5 dlv
2 7 dlv
0 39 dlv
dle
5289 1258 dlt
36 0 dlv
-36 -54 dlv
36 0 dlv
dle
5340 1258 dlt
36 0 dlv
-36 -54 dlv
36 0 dlv
dle
5427 1258 dlt
-34 0 dlv
0 -54 dlv
34 0 dlv
dle
21 0 5393 1232 dls
5442 1204 dlt
0 54 dlv
23 0 dlv
7 -3 dlv
3 -2 dlv
3 -5 dlv
0 -6 dlv
-3 -5 dlv
-3 -2 dlv
-7 -3 dlv
-23 0 dlv
dle
18 -28 5460 1232 dls
5508 1258 dlt
-7 -3 dlv
-6 -7 dlv
-2 -13 dlv
0 -8 dlv
2 -13 dlv
6 -7 dlv
7 -3 dlv
5 0 dlv
8 3 dlv
5 7 dlv
3 13 dlv
0 8 dlv
-3 13 dlv
-5 7 dlv
-8 3 dlv
-5 0 dlv
dle
-36 -54 5529 1258 dls
1000 1000 1000 slc
1000 1000 1000 sfc
1370 299 1413 342 dbs
1370 1156 1413 1199 dbs
1370 1691 1413 1734 dbs
1370 728 1413 771 dbs
1370 942 1413 985 dbs
1370 514 1413 556 dbs
1370 1370 1413 1413 dbs
1927 1129 dpb
1927 1226 dpv
1986 1226 dpv
2034 1177 dpv
1986 1129 dpv
dps
3196 2286 3228 2318 dbs
2013 1156 2056 1199 dbs
2013 728 2056 771 dbs
2013 1584 2056 1627 dbs
3940 1156 3983 1199 dbs
4749 572 4781 605 dbs
4904 1102 4947 1145 dbs
4904 1210 4947 1252 dbs
0 0 6846 2570 clwin
gfs
%%Trailer
%%EOF
